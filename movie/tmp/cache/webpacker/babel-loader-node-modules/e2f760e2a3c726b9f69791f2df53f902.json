{"ast":null,"code":"var _jsxFileName = \"/home/chico/movie-app/movie/app/javascript/components/Main.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n// =============================\n// DEPENDENCIES\n// =============================\n// packages\nimport React from 'react'; // components\n// =============================\n// COMPONENT CLASS\n// =============================\n// class Main extends React.Component {\n//\n//\n//   constructor(props) {\n//     super(props)\n//     this.state = {\n//       posts: []\n//     }\n//   }\n//\n//\n//   fetchPosts = () => {\n//     fetch('/api/movies')\n//       .then(data => data.json())\n//       .then(jData => {\n//         this.setState({posts: jData})\n//       })\n//   }\n//\n//\n// //Create New post\n// handleCreate = (createData) => {\n//   fetch('/api/movies', {\n//     body: JSON.stringify(createData),\n//     method: 'POST',\n//     headers: {\n//       'Accept': 'application/json, text/plain, */*',\n//       'Content-Type': 'application/json'\n//     }\n//   })\n//     .then(createdPost => {\n//       return createdPost.json()\n//     })\n//     .then(jsonedPost => {\n//       // change to home view\n//  this.props.handleView('home')\n//       this.setState(prevState => {\n//   prevState.posts.push(jsonedPost)\n//   return { posts: prevState.posts }\n// })\n//     })\n//   .catch(err => console.log(err))\n// }\n//\n// //update post\n//\n// handleUpdate = (updateData) => {\n//   fetch(`/api/movies/${updateData.id}`, {\n//     body: JSON.stringify(updateData),\n//     method: 'PUT',\n//     headers: {\n//       'Accept': 'application/json, text/plain, */*',\n//       'Content-Type': 'application/json'\n//     }\n//   })\n//     .then(updatedPost => {\n//       // switch back to the home view after editing a post\n//       this.props.handleView('home')\n//       // for simplicity's sake, we'll just make an extra AJAX call to automatically load the post this time!\n//       // if you're up for a challenge though, try and see if you can figure out how to do it without an extra call\n//       this.fetchPosts()\n//     })\n//     .catch(err => console.log(err))\n// }\n//\n//   componentDidMount() {\n//   this.fetchPosts()\n// }\n//\n// handleDelete = (id) => {\n//   fetch(`/api/movies/${id}`, {\n//     method: 'DELETE',\n//     headers: {\n//       'Accept': 'application/json, text/plain, */*',\n//       'Content-Type': 'application/json'\n//     }\n//   })\n//     .then(json => {\n//       this.setState(prevState => {\n//     const posts = prevState.posts.filter(post => post.id !== id)\n//     return { posts }\n//   })\n//     })\n//     .catch(err => console.log(err))\n// }\n//   // ==============\n//   // RENDER\n//   // ==============\n//   render () {\n//     return (\n//       <main>\n//       <h1>{this.props.view.pageTitle}</h1>\n//       { this.props.view.page === 'home'\n//       ? this.state.posts.map((postData) => (\n//         <Post\n//           key={postData.id}\n//           postData={postData}\n//           handleView={this.props.handleView}\n//           handleDelete={this.handleDelete}\n//         />\n//         ))\n//       :<Form\n//   handleCreate={this.handleCreate}\n//   handleUpdate={this.handleUpdate}\n//   formInputs={this.props.formInputs}\n//   view={this.props.view}\n// />\n//         }\n//\n//       </main>\n//     )\n//   }\n// }\n\nvar Main =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Main, _React$Component);\n\n  function Main() {\n    _classCallCheck(this, Main);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Main).apply(this, arguments));\n  }\n\n  _createClass(Main, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \" Hello \");\n    }\n  }]);\n\n  return Main;\n}(React.Component); // =============================\n// EXPORT\n// =============================\n\n\nexport default Main;","map":{"version":3,"sources":["/home/chico/movie-app/movie/app/javascript/components/Main.js"],"names":["React","Main","Component"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMC,I;;;;;;;;;;;;;6BAEN;AAAC,aACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADD;AAIA;;;;EANkBD,KAAK,CAACE,S,GAQzB;AACA;AACA;;;AACA,eAAeD,IAAf","sourcesContent":["// =============================\n// DEPENDENCIES\n// =============================\n// packages\nimport React from 'react'\n\n// components\n\n// =============================\n// COMPONENT CLASS\n// =============================\n\n\n\n// class Main extends React.Component {\n//\n//\n//   constructor(props) {\n//     super(props)\n//     this.state = {\n//       posts: []\n//     }\n//   }\n//\n//\n//   fetchPosts = () => {\n//     fetch('/api/movies')\n//       .then(data => data.json())\n//       .then(jData => {\n//         this.setState({posts: jData})\n//       })\n//   }\n//\n//\n// //Create New post\n// handleCreate = (createData) => {\n//   fetch('/api/movies', {\n//     body: JSON.stringify(createData),\n//     method: 'POST',\n//     headers: {\n//       'Accept': 'application/json, text/plain, */*',\n//       'Content-Type': 'application/json'\n//     }\n//   })\n//     .then(createdPost => {\n//       return createdPost.json()\n//     })\n//     .then(jsonedPost => {\n//       // change to home view\n//  this.props.handleView('home')\n//       this.setState(prevState => {\n//   prevState.posts.push(jsonedPost)\n//   return { posts: prevState.posts }\n// })\n//     })\n//   .catch(err => console.log(err))\n// }\n//\n// //update post\n//\n// handleUpdate = (updateData) => {\n//   fetch(`/api/movies/${updateData.id}`, {\n//     body: JSON.stringify(updateData),\n//     method: 'PUT',\n//     headers: {\n//       'Accept': 'application/json, text/plain, */*',\n//       'Content-Type': 'application/json'\n//     }\n//   })\n//     .then(updatedPost => {\n//       // switch back to the home view after editing a post\n//       this.props.handleView('home')\n//       // for simplicity's sake, we'll just make an extra AJAX call to automatically load the post this time!\n//       // if you're up for a challenge though, try and see if you can figure out how to do it without an extra call\n//       this.fetchPosts()\n//     })\n//     .catch(err => console.log(err))\n// }\n//\n//   componentDidMount() {\n//   this.fetchPosts()\n// }\n//\n// handleDelete = (id) => {\n//   fetch(`/api/movies/${id}`, {\n//     method: 'DELETE',\n//     headers: {\n//       'Accept': 'application/json, text/plain, */*',\n//       'Content-Type': 'application/json'\n//     }\n//   })\n//     .then(json => {\n//       this.setState(prevState => {\n//     const posts = prevState.posts.filter(post => post.id !== id)\n//     return { posts }\n//   })\n//     })\n//     .catch(err => console.log(err))\n// }\n//   // ==============\n//   // RENDER\n//   // ==============\n//   render () {\n//     return (\n//       <main>\n//       <h1>{this.props.view.pageTitle}</h1>\n//       { this.props.view.page === 'home'\n//       ? this.state.posts.map((postData) => (\n//         <Post\n//           key={postData.id}\n//           postData={postData}\n//           handleView={this.props.handleView}\n//           handleDelete={this.handleDelete}\n//         />\n//         ))\n//       :<Form\n//   handleCreate={this.handleCreate}\n//   handleUpdate={this.handleUpdate}\n//   formInputs={this.props.formInputs}\n//   view={this.props.view}\n// />\n//         }\n//\n//       </main>\n//     )\n//   }\n// }\n\nclass Main extends React.Component {\nrender()\n{return(\n  <h1> Hello </h1>\n)\n\n}\n}\n// =============================\n// EXPORT\n// =============================\nexport default Main\n"]},"metadata":{},"sourceType":"module"}